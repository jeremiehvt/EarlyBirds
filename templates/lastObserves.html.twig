{% extends 'base.html.twig' %}

{% block title %}NAO - Dernières bobservations{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
          integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
          crossorigin=""/>
{% endblock %}

{% block body %}
    <div class="container">

        <div class="row">
            <div class="col s12">
                <div class="row">
                    <div class="input-field col s12">
                        <i class="material-icons prefix">textsms</i>
                        <input type="text" id="autocomplete-input" class="autocomplete">
                        <label for="autocomplete-input">Nom Latin ou Vernaculaire</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">

            <ul class="collapsible">
                {% for observe in observes %}
                    <li class="observePanel" data-index="{{ observe.id }}" data-lat="{{ observe.latitude }}" data-long="{{ observe.longitude }}">
                        <div class="collapsible-header js-taxref" data-taxref="{{ path('taxref', {id: observe.ref.id}) }}">

                            <div class="imgContainer">
                                <img id="thumbnails" src="{{ observe.img }}" class="materialboxed" style="display: block">
                            </div>
                            <div class="ObsTitle col s8 xl10  center">
                                <span>le {{ observe.createdAt|localizeddate('full', 'none') }} par {% if observe.author.nickname is defined %}{{ observe.author.nickname }}{% else %}{{ observe.author.email }}{% endif %}</span>
                                <hr>
                                <div id="obsButtons" class="row">
                                    <div class="col s4 m3 l2 xl1">
                                        {% if observe.validator is same as(null) %}
                                            <img src="{{ asset('/img/icons/baseline-hourglass_empty-24px.svg') }}">
                                        {% else %}
                                            <img src="{{ asset('/img/icons/baseline-assignment_turned_in-24px.svg') }}">
                                        {% endif %}
                                    </div>
                                    <div class="col s4 m3 l2 xl1">
                                        {% if observe.validator is same as(null) %}
                                            <img class="modifObs" src="{{ asset('/img/icons/baseline-edit-24px.svg') }}" href="#">
                                        {% else %}
                                            <img src="{{ asset('/img/icons/baseline-edit-24px.svg') }}" style="opacity: 0.5">
                                        {% endif %}
                                    </div>
                                    <div class="col s4 m3 l2 xl1">
                                        {% if observe.validator is same as(null) %}
                                            <img class="delObs" src="{{ asset('/img/icons/baseline-delete-24px.svg') }}">
                                        {% else %}
                                            <img src="{{ asset('/img/icons/baseline-delete-24px.svg') }}" style="opacity: 0.5">
                                        {% endif %}
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="collapsible-body">
                            <div class="row">
                                <div id="mapContainer" class="map-container-{{ observe.id }} row" data-index="{{ observe.id }}">
                                    <div class="obsMapDiv col s6">
                                        <ul id="info">
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col s12">
                                    <p>{{ observe.description }}</p>
                                </div>
                            </div>
                        </div>
                    </li>
                {% endfor %}
            </ul>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
            integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
            crossorigin=""></script>
    <script>
        // little spinner code
        let spinner = '<div id="spinner" class="col s12 center">' +
            '<div class="preloader-wrapper small active">' +
            '<div class="spinner-layer spinner-green-only">' +
            '<div class="circle-clipper left">' +
            '<div class="circle"></div>' +
            '</div><div class="gap-patch">' +
            '<div class="circle"></div>' +
            '</div><div class="circle-clipper right">' +
            '<div class="circle"></div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';

        // Big spinner code
        let bigSpinner = '<div id="bigSpinner" class="col s12 center">' +
            '<div class="preloader-wrapper big active">' +
            '    <div class="spinner-layer spinner-green-only">' +
            '      <div class="circle-clipper left">' +
            '        <div class="circle"></div>' +
            '      </div><div class="gap-patch">' +
            '        <div class="circle"></div>' +
            '      </div><div class="circle-clipper right">' +
            '        <div class="circle"></div>' +
            '      </div>' +
            '    </div>' +
            '  </div>' +
            ' </div>';

        $(document).ready(function() {
            // Flash message display loop
            {% for flash in app.flashes('profile') %}
            $(function () {
                M.toast({html: '<span>{{ flash }}</span>'});
            });
            {% endfor %}

            $('.js-taxref').each(function () {
                let $taxref = $(this);
                $(this).find('.ObsTitle').prepend(spinner);
                $taxref.parent().find('#info').append(bigSpinner);
                let taxrefData = $(this).data('taxref');

                $.getJSON(taxrefData, function (data) {
                    $.each(data, function (key, val) {
                        $taxref.find('#spinner').fadeOut('normal', function () {
                            $taxref.find('#spinner').remove()
                        });
                        $taxref.parent().find('#bigSpinner').fadeOut('normal', function () {
                            $taxref.parent().find('#bigSpinner').remove()
                        });
                        if ('nomVern' === key) {
                            $taxref.find('.ObsTitle').prepend('<h6>' + val + '</h6>');
                        }
                        if ('lbNom' === key) {
                            nomData[val] = null;
                            $taxref.parent().find('#info').append('<li class="latin" data-latin="'+val+'">Nom scientifique : ' + val + '</li>');
                        }
                        if ('nomVern' === key) {
                            nomData[val] = null;
                            $taxref.parent().find('#info').append('<li class="vern" data-vern="'+val+'">Nom vernaculaire : ' + val + '</li>');
                        }
                        if ('regne' === key) {
                            $taxref.parent().find('#info').append('<li>Règne : ' + val + '</li>');
                        }
                        if ('phylum' === key) {
                            $taxref.parent().find('#info').append('<li>Embranchement : ' + val + '</li>');
                        }
                        if ('famille' === key) {
                            $taxref.parent().find('#info').append('<li>Famille : ' + val + '</li>');
                        }
                        if ('habitat' === key) {
                            $taxref.parent().find('#info').append('<li>Habitat : ' + habitat(val) + '</li>');
                        }
                        if (null != lb(val) && null != status(key)) {
                            $taxref.parent().find('#info').append('<li>' + lb(val) + ' ' + status(key) + '</li>');
                        }
                        if ('rang' === key) {
                            $taxref.parent().find('#info').append('<li>Rang : ' + rang(val) + '</li>');
                        }
                    })
                })
            });

            $('.materialboxed').click(function (e) {
                e.stopPropagation();
            });

            $('.modifObs').click(function (e) {
                return false;
            });

            let nomData = {};
            $('input.autocomplete').autocomplete({
                data: nomData,
                onAutocomplete: function () {
                    let name = this.el.value;
                    if (name === "") {
                        $('li.observePanel').each(function () {
                            $(this).show();
                        })
                    }
                    $('li.observePanel').each(function () {
                        let verName = $(this).find('.vern').data('vern');
                        let nomLatin = $(this).find('.latin').data('latin');
                        $(this).hide();
                        if (verName.replace(/ /g,'') === name.replace(/ /g,'') || nomLatin.replace(/ /g,'') === name.replace(/ /g,'')) {
                            $(this).show();
                        }
                    })
                },
            });

            $('input.autocomplete').keyup(function () {
                if (this.value === "") {
                    $('li.observePanel').each(function () {
                        $(this).show();
                    })
                }
            });

            $('#obsTab').click(function () {
                deleteMap($('.observePanel.active'));
                $('.collapsible').collapsible('close');
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            let images =document.querySelectorAll('.materialboxed');
            let elems = document.querySelectorAll('.collapsible');
            let tulles = M.Collapsible.init(elems, {
                onCloseStart: function (e) {
                    deleteMap(e);
                },
                onOpenEnd: function (e) {
                    createMap(e);
                },
            });
            let imagesAnim = M.Materialbox.init(images, {
                onOpenStart: function (e) {
                    $(elems).find('#obsMap').remove();
                },
                onCloseStart: function (e) {
                    if ($('li.observePanel.active').length === 1) {
                        createMap($('li.observePanel.active'));
                    };
                }
            });
        });

        function createMap(e) {
            let index = $(e).data('index');
            let lat = $(e).data('lat');
            let long = $(e).data('long');

            let $mapContainer = $('.' + 'map-container-' + index);

            $($mapContainer).append('<div id="obsMap" class="map-' + index + ' col s12 l6" style="height: 400px; padding: 0"></div>');

            let mymap = L.map('obsMap').setView([lat, long], 11);

            L.marker([lat, long]).addTo(mymap);

            L.tileLayer(
                'https://api.mapbox.com/styles/v1/mapbox/outdoors-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibmVva2lsbGVyMTEzIiwiYSI6ImNqZ2h2c2xxMzBsbm0ycWsxemJ6YnNpZXEifQ.PiGeZsNjVNyo1G80Y1KD4Q', {
                    maxZoom: 18,
                    minZoom: 5,
                    id: 'mapbox.streets',
                }).addTo(mymap);
        }

        function deleteMap(e) {

            let index = $(e).data('index');
            let $map = $('.' + 'map-' + index);
            $($map).remove();
        }

        function lb(rang) {
            switch (rang) {
                case "A":
                    return "Absente";
                    break;
                case "B":
                    return "Accidentelle / Visiteuse";
                    break;
                case "C":
                    return "Cryptogène";
                    break;
                case "D":
                    return "Douteuse";
                    break;
                case "E":
                    return "Endémique";
                    break;
                case "F":
                    return "Trouvée en fouille";
                    break;
                case "I":
                    return "Introduite";
                    break;
                case "J":
                    return "Introduite envahissante";
                    break;
                case "M":
                    return "Domestique / Introduite non établie";
                    break;
                case "P":
                    return "Présente";
                    break;
                case "Q":
                    return "Mentionnée par erreur";
                    break;
                case "S":
                    return "Subendémique";
                    break;
                case "W":
                    return "Disparue";
                    break;
                case "X":
                    return "Éteinte";
                    break;
                case "Y":
                    return "Introduite éteinte";
                    break;
                case "Z":
                    return "Endémique éteinte";
                    break;
            }
        }

        function status(status) {
            switch (status) {
                case "fr":
                    return "en France métropolitaine";
                    break;
                case "gf":
                    return "en Guyane française";
                    break;
                case "mar":
                    return "à la Martinique";
                    break;
                case "gua":
                    return "à la Guadeloupe";
                    break;
                case "sm":
                    return "à Saint-Martin";
                    break;
                case "spm":
                    return "à Saint-Pierre et Miquelon";
                    break;
                case "may":
                    return "à Mayotte";
                    break;
                case "epa":
                    return "aux Îles Éparses";
                    break;
                case "reu":
                    return "à la Réunion";
                    break;
                case "sa":
                    return "aux îles subantarctiques";
                    break;
                case "ta":
                    return "en Terre Adélie";
                    break;
                case "nc":
                    return "en Nouvelle-Calédonie";
                    break;
                case "wf":
                    return "à Wallis et Futuna";
                    break;
                case "pf":
                    return "en Polynésie française";
                    break;
                case "cli":
                    return "à Clipperton";
                    break;
                case "sb":
                    return "à Saint-Barthélemy";
                    break;
            }

        }

        function rang(rang) {
            switch (rang) {
                case "KD":
                    return "Règne";
                    break;
                case "PH":
                    return "Embranchement";
                    break;
                case "CL":
                    return "Classe";
                    break;
                case "OR":
                    return "Ordre";
                    break;
                case "FM":
                    return "Famille";
                    break;
                case "GN":
                    return "Genre";
                    break;
                case "AGES":
                    return "Agrégat";
                    break;
                case "ES":
                    return "Espèce";
                    break;
                case "SSES":
                    return "Sous-espèce";
                    break;
                case "CVAR":
                    return "Convariété";
                    break;
                case "VAR":
                    return "Variété";
                    break;
                case "FO":
                    return "Forme";
                    break;
                case "SSFO":
                    return "Sous-forme";
                    break;
                case "RACE":
                    return "Race";
                    break;
                case "HYB":
                    return "Hybride";
                    break;
            }
        }

        function habitat(habitat) {
            switch (habitat) {
                case "1":
                    return "Marin";
                    break;
                case "2":
                    return "Eau douce";
                    break;
                case "3":
                    return "Terrestre";
                    break;
                case "4":
                    return "Marin & Eau douce";
                    break;
                case "5":
                    return "Marin & Terrestre";
                    break;
                case "6":
                    return "Eau saumâtre";
                    break;
                case "7":
                    return "Continental (terrestre et/ou eau douce)";
                    break;
                case "8":
                    return 'Continental (terrestre et eau douce)';
                    break;
            }
        }
    </script>
{% endblock %}

